package DataManager;

import java.sql.Timestamp;
import java.util.Calendar;

public class DMLog {

	int type = 0; //0 for statistics, 1 for recovery 
	
	/*
	 * Attributes for type 1
	 */
	String transactionID = null;;
	String operation = null;
	String table = null;
	Tuple beforeTupleImage = null;
	/*
	 * If integrity constraint violation was detected, all the following instructions 
	 * will be ignored. These received instructions will be recorded in the log, but 
	 * will not be executed.
	 */
	boolean isExecuted = false;
	
	
	/*
	 * Attributes for type 0
	 */
	String bufferOp = null; // "Merge" or "Swap"
	String source = null;
	String destination = null; 

	Timestamp timeOfRequestReceived = null;
	
	Timestamp timeOfRequestFinished = null;
	
	public DMLog(int t, String tID, String op, String table, Tuple beforeImage, boolean isExecuted){
		this.type = t;
		this.transactionID = tID;
		this.operation= op;
		this.table = table;
		this.beforeTupleImage = beforeImage;
		this.isExecuted = isExecuted;
		Calendar calendar = Calendar.getInstance();
		this.timeOfRequestReceived = new java.sql.Timestamp(calendar.getTime().getTime());
	}
	
	public DMLog(int t, String bOp, String s, String dest){
		this.type = t;
		this.bufferOp = bOp;
		this.source = s;
		this.destination = dest;
		Calendar calendar = Calendar.getInstance();
		this.timeOfRequestReceived = new java.sql.Timestamp(calendar.getTime().getTime());
	}
	
	public void setFinishtTimestamp(){
		Calendar calendar = Calendar.getInstance();
		this.timeOfRequestFinished = new java.sql.Timestamp(calendar.getTime().getTime());
	}
}

