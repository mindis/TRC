package Scheduler;
import java.util.*;
//<transactionID, lockType>
public class LockTable
{
	private HashMap<String, LockTableValue> tabLock;
	private HashMap<String, LockTableValue> recLock;
	private HashMap<String, Integer> retrieveLockType;
	private HashMap<String, String> retrieveRecID;
	//private HashMap<String, String> retrieveTabID;
	
	public LockTable()
	{
		tabLock = new HashMap<String, LockTableValue>();
		recLock = new HashMap<String, LockTableValue>();
		retrieveLockType = new HashMap<String, Integer>();
		retrieveRecID = new HashMap<String, String>();
		//retrieveTabID = new HashMap<String, String>();
	}
	//request a table level lock
	public boolean add(LockTableElement e, String tableID)
	{
		LockTableValue ltv;
		boolean re;
		
		//retrieveLockType.put(e.getTransactionID(), e.getLockType());
		//retrieveTabID.put(e.getTransactionID(), tableID);
		if(e.getLockType() < 1 || e.getLockType() > 4)
		{
			System.out.println("add(LockTableElement e, String tableID): lock type error!");
			System.exit(1);
			return false;
		}
		if(tabLock.containsKey(tableID))
			ltv = tabLock.get(tableID);
		else
			ltv = new LockTableValue();
		re = ltv.add(e);
		tabLock.put(tableID, ltv);
		return re;
	}
	//request a record level lock
	public boolean add(LockTableElement e, String tableID, String recordID)
	{
		LockTableValue ltv;
		boolean re;
		//change S(X) on record to IS(IX) on table
		LockTableElement temp = new LockTableElement(e.getTransactionID(), e.getLockType() - 2);
		
		//retrieveLockType.put(e.getTransactionID(), e.getLockType());
		//retrieveRecID.put(e.getTransactionID(), recordID);
		//retrieveTabID.put(e.getTransactionID(), tableID);
		if(e.getLockType() < 3 || e.getLockType() > 4)
		{
			System.out.println("add(LockTableElement e, String tableID, String recordID): lock type error!");
			System.exit(1);
			return false;
		}
		//add table level lock first
		if(tabLock.containsKey(tableID))
			ltv = tabLock.get(tableID);
		else
			ltv = new LockTableValue();
		re = ltv.add(temp);
		tabLock.put(tableID, ltv);
		if(!re) //fail to get table level lock
		{
			retrieveLockType.put(e.getTransactionID(), e.getLockType());
			retrieveRecID.put(e.getTransactionID(), recordID);
			return false;
		}
		//then add record level lock
		else
		{
			if(recLock.containsKey(recordID))
				ltv = recLock.get(recordID);
			else
				ltv = new LockTableValue();
			re = ltv.add(e);
			recLock.put(recordID, ltv);
			return re;
		}
	}
	
	//remove all the locks of a transaction when it finishes
	//return a transactionID if it is released from waiting list
	public ArrayList<String> remove(String transactionID)
	{
		ArrayList<String> releasedTxID  = new ArrayList<String>();
		
		//remove from record level lock table
		Iterator<String> lockTableIterator = recLock.keySet().iterator();
		while(lockTableIterator.hasNext())
		{
			String key = lockTableIterator.next();
			LockTableValue value = recLock.get(key);
			String s = value.remove(transactionID);
			if(s.length() > 0)
			{
				releasedTxID.add(s);
			}
		}
		
		//remove from table level lock table
		lockTableIterator = tabLock.keySet().iterator();
		while(lockTableIterator.hasNext())
		{
			String key = lockTableIterator.next();
			LockTableValue value = tabLock.get(key);
			String s = value.remove(transactionID);
			//if unlock a transaction
			if(s.length() > 0)
			{
				//if a record level lock is blocked at the table level
				if(retrieveLockType.containsKey(s))
				{
					String dataID = retrieveRecID.get(s);
					int lType = retrieveLockType.get(s);
					
					if(add(new LockTableElement(s, lType), key, dataID))
						releasedTxID.add(s);
				}
				
			}
		}
		return releasedTxID;
		
	}
	
	public String toString()
	{
		String s = "Table level\n" + tabLock + "\nRecord level\n" + recLock;
		return s;
	}
	
	public static void main(String[] args)
	{
		LockTable lt = new LockTable();
		
		lt.add(new LockTableElement("T1", 3), "table11", "rec3");
		System.out.println(lt);
		lt.add(new LockTableElement("T2", 3), "table11");
		System.out.println(lt);
		lt.add(new LockTableElement("T3", 4), "table11", "rec4");
		System.out.println(lt);
		lt.remove("T2");
		lt.remove("T1");
		System.out.println(lt);
		
	}
}
